---
source: facet-macros-emit/tests/codegen/function.rs
expression: "expand_function(r#\"\n        /// Generic function that adds two values\n        fn generic_add<T: Add<Output = T>>(x: T, y: T) -> T {\n            x + y\n        }\n        \"#)"
---
#[allow(non_snake_case)]
mod __fn_shape_generic_add {
    use super::*;
    pub(super) fn inner<T: Add<Output = T>>(x: T, y: T) -> T {
        x + y
    }
    #[derive(Debug, Clone)]
    pub struct FunctionShape<Args, Ret, Generics = ()> {
        pub name: &'static str,
        pub param_count: usize,
        pub param_names: &'static [&'static str],
        pub documentation: &'static [&'static str],
        _args: core::marker::PhantomData<Args>,
        _ret: core::marker::PhantomData<Ret>,
        _generics: core::marker::PhantomData<Generics>,
    }
    impl<Args, Ret, Generics> FunctionShape<Args, Ret, Generics> {
        pub const fn new(
            name: &'static str,
            param_count: usize,
            param_names: &'static [&'static str],
            documentation: &'static [&'static str],
        ) -> Self {
            Self {
                name,
                param_count,
                param_names,
                documentation,
                _args: core::marker::PhantomData,
                _ret: core::marker::PhantomData,
                _generics: core::marker::PhantomData,
            }
        }
    }
    pub fn shape<T: Add<Output = T>>() -> FunctionShape<(T, T), T, T> {
        FunctionShape::new(
            "generic_add",
            2usize,
            &["x", "y"],
            &[" Generic function that adds two values"],
        )
    }
}
pub fn generic_add<T: Add<Output = T>>(x: T, y: T) -> T {
    __fn_shape_generic_add::inner(x, y)
}
pub use __fn_shape_generic_add::shape as GENERIC_ADD_SHAPE;
