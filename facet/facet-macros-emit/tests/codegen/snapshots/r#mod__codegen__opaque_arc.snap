---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        pub struct Handle(#[facet(opaque)] std::sync::Arc<NotDerivingFacet>);\n        \"#)"
---
static HANDLE_SHAPE: &'static ::facet::Shape = <Handle as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Handle {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable =
            ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(f, "Handle"));
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [{
                ::facet::Field::builder()
                    .name("0")
                    .shape(::facet::shape_of_opaque(&|s: &Handle| &s.0))
                    .offset(::core::mem::offset_of!(Handle, 0))
                    .build()
            }]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("Handle")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::TupleStruct)
                    .fields(fields)
                    .build(),
            )))
            .build()
    };
}
