---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum OneLevelNested<T> {\n            VariantA(Result<T, String>),\n            VariantB(Option<T>),\n            // Also include a unit variant to check un-nested\n            Plain,\n        }\n        \"#)"
---
#[automatically_derived]
#[allow(non_camel_case_types)]
unsafe impl<'__facet, T> ::facet::Facet<'__facet> for OneLevelNested<T>
where
    T: ::facet::Facet<'__facet>,
{
    const VTABLE: &'static ::facet::ValueVTable = &const {
        ::facet::value_vtable!(Self, |f, opts| {
            write!(f, "OneLevelNested")?;
            if let Some(opts) = opts.for_children() {
                write!(f, "<")?;
                <T as ::facet::Facet>::SHAPE.vtable.type_name()(f, opts)?;
                write!(f, ">")?;
            } else {
                write!(f, "<â€¦>")?;
            }
            Ok(())
        })
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_OneLevelNested_VariantA<'__facet, T>
        where
            T: ::facet::Facet<'__facet>,
        {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet (), T)>,
            _0: Result<T, String>,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_OneLevelNested_VariantB<'__facet, T>
        where
            T: ::facet::Facet<'__facet>,
        {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet (), T)>,
            _0: Option<T>,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            ::facet::Field::builder()
                                .name("0")
                                .shape(::facet::shape_of(
                                    &|s: &__Shadow_RustRepr_Tuple_for_OneLevelNested_VariantA<
                                        '__facet,
                                        T,
                                    >| &s._0,
                                ))
                                .offset(::core::mem::offset_of!(
                                    __Shadow_RustRepr_Tuple_for_OneLevelNested_VariantA<
                                        '__facet,
                                        T,
                                    >,
                                    _0
                                ))
                                .build()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("VariantA")
                        .discriminant(0i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            ::facet::Field::builder()
                                .name("0")
                                .shape(::facet::shape_of(
                                    &|s: &__Shadow_RustRepr_Tuple_for_OneLevelNested_VariantB<
                                        '__facet,
                                        T,
                                    >| &s._0,
                                ))
                                .offset(::core::mem::offset_of!(
                                    __Shadow_RustRepr_Tuple_for_OneLevelNested_VariantB<
                                        '__facet,
                                        T,
                                    >,
                                    _0
                                ))
                                .build()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("VariantB")
                        .discriminant(1i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                ::facet::Variant::builder()
                    .name("Plain")
                    .discriminant(2i64 as i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("OneLevelNested")
            .type_params(&[::facet::TypeParam {
                name: "T",
                shape: || <T as ::facet::Facet>::SHAPE,
            }])
            .ty(::facet::Type::User(::facet::UserType::Enum(
                ::facet::EnumType::builder()
                    .variants(__facet_variants)
                    .repr(::facet::Repr::default())
                    .enum_repr(::facet::EnumRepr::U8)
                    .build(),
            )))
            .build()
    };
}
