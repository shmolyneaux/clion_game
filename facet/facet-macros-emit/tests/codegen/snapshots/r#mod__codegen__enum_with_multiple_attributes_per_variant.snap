---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum ConfigValue {\n            #[facet(rename = \"TextValue\")]\n            Text(String),\n            #[facet(rename = \"NumberValue\")]\n            Number {\n                #[facet(rename = \"numValue\")]\n                value: f64,\n                #[facet(rename = \"unitName\", sensitive)]\n                unit: String,\n            },\n            #[facet(rename = \"BoolValue\")]\n            Boolean(bool),\n        }\n        \"#)"
---
static CONFIG_VALUE_SHAPE: &'static ::facet::Shape = <ConfigValue as ::facet::Facet>::SHAPE;
#[automatically_derived]
#[allow(non_camel_case_types)]
unsafe impl<'__facet> ::facet::Facet<'__facet> for ConfigValue {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "ConfigValue"
        ))
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_ConfigValue_Text<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: String,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Struct_for_ConfigValue_Number<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            value: f64,
            unit: String,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_ConfigValue_Boolean<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: bool,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            ::facet::Field::builder()
                                .name("0")
                                .shape(::facet::shape_of(
                                    &|s: &__Shadow_RustRepr_Tuple_for_ConfigValue_Text<
                                        '__facet,
                                    >| &s._0,
                                ))
                                .offset(::core::mem::offset_of!(
                                    __Shadow_RustRepr_Tuple_for_ConfigValue_Text<'__facet>,
                                    _0
                                ))
                                .build()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("TextValue")
                        .discriminant(0i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [
                            {
                                ::facet::Field::builder()
                                    .name("numValue")
                                    .shape(::facet::shape_of(
                                        &|s: &__Shadow_RustRepr_Struct_for_ConfigValue_Number<
                                            '__facet,
                                        >| &s.value,
                                    ))
                                    .offset(::core::mem::offset_of!(
                                        __Shadow_RustRepr_Struct_for_ConfigValue_Number<'__facet>,
                                        value
                                    ))
                                    .build()
                            },
                            {
                                ::facet::Field::builder()
                                    .name("unitName")
                                    .shape(::facet::shape_of(
                                        &|s: &__Shadow_RustRepr_Struct_for_ConfigValue_Number<
                                            '__facet,
                                        >| &s.unit,
                                    ))
                                    .offset(::core::mem::offset_of!(
                                        __Shadow_RustRepr_Struct_for_ConfigValue_Number<'__facet>,
                                        unit
                                    ))
                                    .flags(::facet::FieldFlags::SENSITIVE)
                                    .build()
                            },
                        ]
                    };
                    ::facet::Variant::builder()
                        .name("NumberValue")
                        .discriminant(1i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .struct_()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            ::facet::Field::builder()
                                .name("0")
                                .shape(::facet::shape_of(
                                    &|s: &__Shadow_RustRepr_Tuple_for_ConfigValue_Boolean<
                                        '__facet,
                                    >| &s._0,
                                ))
                                .offset(::core::mem::offset_of!(
                                    __Shadow_RustRepr_Tuple_for_ConfigValue_Boolean<'__facet>,
                                    _0
                                ))
                                .build()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("BoolValue")
                        .discriminant(2i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("ConfigValue")
            .ty(::facet::Type::User(::facet::UserType::Enum(
                ::facet::EnumType::builder()
                    .variants(__facet_variants)
                    .repr(::facet::Repr::default())
                    .enum_repr(::facet::EnumRepr::U8)
                    .build(),
            )))
            .build()
    };
}
