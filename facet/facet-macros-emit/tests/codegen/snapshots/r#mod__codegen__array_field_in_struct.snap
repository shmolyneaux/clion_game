---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        pub struct DataPacket {\n            header: [u8; 16],\n            payload: Vec<u8>,\n            metadata: [MetadataTag; 4],\n        }\n        \"#)"
---
static DATA_PACKET_SHAPE: &'static ::facet::Shape = <DataPacket as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for DataPacket {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable = ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "DataPacket"
        ));
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                {
                    ::facet::Field::builder()
                        .name("header")
                        .shape(::facet::shape_of(&|s: &DataPacket| &s.header))
                        .offset(::core::mem::offset_of!(DataPacket, header))
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("payload")
                        .shape(::facet::shape_of(&|s: &DataPacket| &s.payload))
                        .offset(::core::mem::offset_of!(DataPacket, payload))
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("metadata")
                        .shape(::facet::shape_of(&|s: &DataPacket| &s.metadata))
                        .offset(::core::mem::offset_of!(DataPacket, metadata))
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("DataPacket")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            )))
            .build()
    };
}
