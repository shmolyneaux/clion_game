---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        struct Blah<const C: usize = 3>\n        where\n             [u8; C]: Debug; // Example bound using the const generic\n        \"#)"
---
#[automatically_derived]
unsafe impl<'__facet, const C: usize> ::facet::Facet<'__facet> for Blah<C>
where
    [u8; C]: Debug,
{
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable = ::facet::value_vtable!(Self, |f, opts| {
            write!(f, "Blah")?;
            if let Some(opts) = opts.for_children() {
                write!(f, "<")?;
                write!(f, "{:?}", C)?;
                write!(f, ">")?;
            } else {
                write!(f, "<â€¦>")?;
            }
            Ok(())
        });
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const { [] };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("Blah")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::Unit)
                    .fields(fields)
                    .build(),
            )))
            .build()
    };
}
