---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(default)]\n        struct ForFacetDefaultDemo {\n            #[facet(default)]\n            field1: u32,\n            #[facet(default = my_field_default_fn())]\n            field2: String,\n            field3: bool,\n        }\n        \"#)"
---
static FOR_FACET_DEFAULT_DEMO_SHAPE: &'static ::facet::Shape =
    <ForFacetDefaultDemo as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for ForFacetDefaultDemo {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable = ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "ForFacetDefaultDemo"
        ));
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                {
                    :: facet :: static_assertions :: assert_impl_all ! (u32 : :: core :: default :: Default);
                    ::facet::Field::builder()
                        .name("field1")
                        .shape(::facet::shape_of(&|s: &ForFacetDefaultDemo| &s.field1))
                        .offset(::core::mem::offset_of!(ForFacetDefaultDemo, field1))
                        .flags(::facet::FieldFlags::DEFAULT)
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("field2")
                        .shape(::facet::shape_of(&|s: &ForFacetDefaultDemo| &s.field2))
                        .offset(::core::mem::offset_of!(ForFacetDefaultDemo, field2))
                        .flags(::facet::FieldFlags::DEFAULT)
                        .vtable(
                            &const {
                                ::facet::FieldVTable::builder()
                                    .default_fn(|ptr| unsafe {
                                        ptr.put::<String>(my_field_default_fn())
                                    })
                                    .build()
                            },
                        )
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("field3")
                        .shape(::facet::shape_of(&|s: &ForFacetDefaultDemo| &s.field3))
                        .offset(::core::mem::offset_of!(ForFacetDefaultDemo, field3))
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("ForFacetDefaultDemo")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            )))
            .attributes(&[::facet::ShapeAttribute::Default])
            .build()
    };
}
