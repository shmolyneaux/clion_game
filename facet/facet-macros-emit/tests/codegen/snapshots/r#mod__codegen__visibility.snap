---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        pub struct Test<T> {\n            pub(crate) a: T,\n        }\n        \"#)"
---
#[automatically_derived]
unsafe impl<'__facet, T> ::facet::Facet<'__facet> for Test<T>
where
    T: ::facet::Facet<'__facet>,
{
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable = ::facet::value_vtable!(Self, |f, opts| {
            write!(f, "Test")?;
            if let Some(opts) = opts.for_children() {
                write!(f, "<")?;
                <T as ::facet::Facet>::SHAPE.vtable.type_name()(f, opts)?;
                write!(f, ">")?;
            } else {
                write!(f, "<â€¦>")?;
            }
            Ok(())
        });
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [{
                ::facet::Field::builder()
                    .name("a")
                    .shape(::facet::shape_of(&|s: &Test<T>| &s.a))
                    .offset(::core::mem::offset_of!(Test<T>, a))
                    .build()
            }]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("Test")
            .type_params(&[::facet::TypeParam {
                name: "T",
                shape: || <T as ::facet::Facet>::SHAPE,
            }])
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            )))
            .build()
    };
}
