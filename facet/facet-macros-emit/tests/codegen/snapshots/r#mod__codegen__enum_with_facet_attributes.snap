---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(name = \"MyCoolEnum\", repr = \"u16\", type_tag = \"rs.facet.MyCoolEnum\")]\n        #[repr(u16)] // Ensure repr matches if specified in facet attribute\n        enum EnumWithAttributes {\n            #[facet(name = \"FirstVariant\", discriminant = 10)]\n            VariantA,\n\n            #[facet(skip)]\n            InternalVariant(i32),\n\n            #[facet(deprecated = \"Use VariantD instead\")]\n            VariantC {\n                #[facet(sensitive)]\n                secret: String\n            },\n\n            VariantD {\n                 #[facet(default = forty_two())]\n                 value: i32\n            },\n        }\n        \"#)"
---
static ENUM_WITH_ATTRIBUTES_SHAPE: &'static ::facet::Shape =
    <EnumWithAttributes as ::facet::Facet>::SHAPE;
#[automatically_derived]
#[allow(non_camel_case_types)]
unsafe impl<'__facet> ::facet::Facet<'__facet> for EnumWithAttributes {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "EnumWithAttributes"
        ))
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_EnumWithAttributes_InternalVariant<'__facet> {
            _discriminant: u16,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: i32,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantC<'__facet> {
            _discriminant: u16,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            secret: String,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantD<'__facet> {
            _discriminant: u16,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            value: i32,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("VariantA")
                    .attributes(&[
                        ::facet::VariantAttribute::Arbitrary("name = \"FirstVariant\""),
                        ::facet::VariantAttribute::Arbitrary("discriminant = 10"),
                    ])
                    .discriminant(0i64 as i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            :: facet :: Field :: builder () . name ("0") . shape (:: facet :: shape_of (& | s : & __Shadow_RustRepr_Tuple_for_EnumWithAttributes_InternalVariant < '__facet > | & s . _0)) . offset (:: core :: mem :: offset_of ! (__Shadow_RustRepr_Tuple_for_EnumWithAttributes_InternalVariant < '__facet > , _0)) . build ()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("InternalVariant")
                        .attributes(&[::facet::VariantAttribute::Arbitrary("skip")])
                        .discriminant(1i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            :: facet :: Field :: builder () . name ("secret") . shape (:: facet :: shape_of (& | s : & __Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantC < '__facet > | & s . secret)) . offset (:: core :: mem :: offset_of ! (__Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantC < '__facet > , secret)) . flags (:: facet :: FieldFlags :: SENSITIVE) . build ()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("VariantC")
                        .attributes(&[::facet::VariantAttribute::Arbitrary(
                            "deprecated = \"Use VariantD instead\"",
                        )])
                        .discriminant(2i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .struct_()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            :: facet :: Field :: builder () . name ("value") . shape (:: facet :: shape_of (& | s : & __Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantD < '__facet > | & s . value)) . offset (:: core :: mem :: offset_of ! (__Shadow_RustRepr_Struct_for_EnumWithAttributes_VariantD < '__facet > , value)) . flags (:: facet :: FieldFlags :: DEFAULT) . vtable (& const { :: facet :: FieldVTable :: builder () . default_fn (| ptr | { unsafe { ptr . put :: < i32 > (forty_two ()) } }) . build () }) . build ()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("VariantD")
                        .discriminant(3i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .struct_()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("EnumWithAttributes")
            .ty(::facet::Type::User(::facet::UserType::Enum(
                ::facet::EnumType::builder()
                    .variants(__facet_variants)
                    .repr(::facet::Repr::default())
                    .enum_repr(::facet::EnumRepr::U16)
                    .build(),
            )))
            .attributes(
                &const {
                    [
                        ::facet::ShapeAttribute::Arbitrary("name = \"MyCoolEnum\""),
                        ::facet::ShapeAttribute::Arbitrary("repr = \"u16\""),
                    ]
                },
            )
            .type_tag("rs.facet.MyCoolEnum")
            .build()
    };
}
