---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        /// This is a struct for sure\n        struct Blah(\n            /// and this is a public field\n            pub u32,\n            /// and this is a crate public field\n            pub(crate) u32,\n        );\n        \"#)"
---
static BLAH_SHAPE: &'static ::facet::Shape = <Blah as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Blah {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable =
            ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(f, "Blah"));
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                {
                    ::facet::Field::builder()
                        .name("0")
                        .shape(::facet::shape_of(&|s: &Blah| &s.0))
                        .offset(::core::mem::offset_of!(Blah, 0))
                        .doc(&[" and this is a public field"])
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("1")
                        .shape(::facet::shape_of(&|s: &Blah| &s.1))
                        .offset(::core::mem::offset_of!(Blah, 1))
                        .doc(&[" and this is a crate public field"])
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("Blah")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::TupleStruct)
                    .fields(fields)
                    .build(),
            )))
            .doc(&[" This is a struct for sure"])
            .build()
    };
}
