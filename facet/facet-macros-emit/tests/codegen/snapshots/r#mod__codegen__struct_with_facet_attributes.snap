---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(name = \"MyCoolStruct\", deny_unknown_fields, version = 2, type_tag = \"rs.facet.MyCoolStruct\")]\n        struct StructWithAttributes {\n            #[facet(name = \"identifier\", default = generate_id, sensitive)]\n            id: String,\n            #[facet(skip, version = 3)]\n            internal_data: Vec<u8>,\n            #[facet(deprecated = \"Use 'new_value' instead\")]\n            old_value: i32,\n            new_value: i32,\n        }\n        \"#)"
---
static STRUCT_WITH_ATTRIBUTES_SHAPE: &'static ::facet::Shape =
    <StructWithAttributes as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for StructWithAttributes {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        let mut vtable = ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "StructWithAttributes"
        ));
        vtable
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                {
                    :: facet :: Field :: builder () . name ("id") . shape (:: facet :: shape_of (& | s : & StructWithAttributes | & s . id)) . offset (:: core :: mem :: offset_of ! (StructWithAttributes , id)) . flags (:: facet :: FieldFlags :: DEFAULT . union (:: facet :: FieldFlags :: SENSITIVE)) . attributes (& const { [:: facet :: FieldAttribute :: Arbitrary ("name = \"identifier\"")] }) . vtable (& const { :: facet :: FieldVTable :: builder () . default_fn (| ptr | { unsafe { ptr . put :: < String > (generate_id) } }) . build () }) . build ()
                },
                {
                    ::facet::Field::builder()
                        .name("internal_data")
                        .shape(::facet::shape_of(&|s: &StructWithAttributes| {
                            &s.internal_data
                        }))
                        .offset(::core::mem::offset_of!(StructWithAttributes, internal_data))
                        .attributes(
                            &const {
                                [
                                    ::facet::FieldAttribute::Arbitrary("skip"),
                                    ::facet::FieldAttribute::Arbitrary("version = 3"),
                                ]
                            },
                        )
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("old_value")
                        .shape(::facet::shape_of(&|s: &StructWithAttributes| &s.old_value))
                        .offset(::core::mem::offset_of!(StructWithAttributes, old_value))
                        .attributes(
                            &const {
                                [::facet::FieldAttribute::Arbitrary(
                                    "deprecated = \"Use 'new_value' instead\"",
                                )]
                            },
                        )
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("new_value")
                        .shape(::facet::shape_of(&|s: &StructWithAttributes| &s.new_value))
                        .offset(::core::mem::offset_of!(StructWithAttributes, new_value))
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("StructWithAttributes")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::default())
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            )))
            .attributes(&[
                ::facet::ShapeAttribute::Arbitrary("name = \"MyCoolStruct\""),
                ::facet::ShapeAttribute::DenyUnknownFields,
                ::facet::ShapeAttribute::Arbitrary("version = 2"),
            ])
            .type_tag("rs.facet.MyCoolStruct")
            .build()
    };
}
