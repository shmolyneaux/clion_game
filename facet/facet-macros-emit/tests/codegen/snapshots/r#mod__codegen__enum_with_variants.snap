---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum EnumWithVariants {\n            Variant1,\n            Variant2(i32),\n            Variant3 { field1: i32, field2: String },\n        }\n        \"#)"
---
static ENUM_WITH_VARIANTS_SHAPE: &'static ::facet::Shape =
    <EnumWithVariants as ::facet::Facet>::SHAPE;
#[automatically_derived]
#[allow(non_camel_case_types)]
unsafe impl<'__facet> ::facet::Facet<'__facet> for EnumWithVariants {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f,
            "EnumWithVariants"
        ))
    };
    const SHAPE: &'static ::facet::Shape<'static> = &const {
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Tuple_for_EnumWithVariants_Variant2<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: i32,
        }
        #[repr(C)]
        #[allow(non_snake_case, dead_code)]
        struct __Shadow_RustRepr_Struct_for_EnumWithVariants_Variant3<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            field1: i32,
            field2: String,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("Variant1")
                    .discriminant(0i64 as i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                {
                    let fields: &'static [::facet::Field] = &const {
                        [{
                            ::facet::Field::builder()
                                .name("0")
                                .shape(::facet::shape_of(
                                    &|s: &__Shadow_RustRepr_Tuple_for_EnumWithVariants_Variant2<
                                        '__facet,
                                    >| &s._0,
                                ))
                                .offset(::core::mem::offset_of!(
                                    __Shadow_RustRepr_Tuple_for_EnumWithVariants_Variant2<'__facet>,
                                    _0
                                ))
                                .build()
                        }]
                    };
                    ::facet::Variant::builder()
                        .name("Variant2")
                        .discriminant(1i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .tuple()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [
                            {
                                :: facet :: Field :: builder () . name ("field1") . shape (:: facet :: shape_of (& | s : & __Shadow_RustRepr_Struct_for_EnumWithVariants_Variant3 < '__facet > | & s . field1)) . offset (:: core :: mem :: offset_of ! (__Shadow_RustRepr_Struct_for_EnumWithVariants_Variant3 < '__facet > , field1)) . build ()
                            },
                            {
                                :: facet :: Field :: builder () . name ("field2") . shape (:: facet :: shape_of (& | s : & __Shadow_RustRepr_Struct_for_EnumWithVariants_Variant3 < '__facet > | & s . field2)) . offset (:: core :: mem :: offset_of ! (__Shadow_RustRepr_Struct_for_EnumWithVariants_Variant3 < '__facet > , field2)) . build ()
                            },
                        ]
                    };
                    ::facet::Variant::builder()
                        .name("Variant3")
                        .discriminant(2i64 as i64)
                        .data(
                            ::facet::StructType::builder()
                                .repr(::facet::Repr::c())
                                .struct_()
                                .fields(fields)
                                .build(),
                        )
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .type_identifier("EnumWithVariants")
            .ty(::facet::Type::User(::facet::UserType::Enum(
                ::facet::EnumType::builder()
                    .variants(__facet_variants)
                    .repr(::facet::Repr::default())
                    .enum_repr(::facet::EnumRepr::U8)
                    .build(),
            )))
            .build()
    };
}
