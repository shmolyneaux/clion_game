---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        /// Network packet types\n        #[derive(Facet)]\n        #[repr(u8)]\n        pub enum Packet {\n            /// Array of bytes representing the header\n            Header([u8; 4]),\n            Payload(Vec<u8>), // Add another variant for completeness\n        }\n        \"#)"
---
#[used]
static PACKET_SHAPE: &'static ::facet::Shape = <Packet as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Packet {
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        struct __ShadowPacket_Header<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: [u8; 4],
        }
        #[repr(C)]
        struct __ShadowPacket_Payload<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: Vec<u8>,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowPacket_Header<'__facet>| &s._0)
                            })
                            .offset(::core::mem::offset_of!(__ShadowPacket_Header<'__facet>, _0))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&const { [] })
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("Header")
                        .discriminant(0)
                        .fields(::facet::StructDef::builder().tuple().fields(fields).build())
                        .doc(&[" Array of bytes representing the header"])
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowPacket_Payload<'__facet>| &s._0)
                            })
                            .offset(::core::mem::offset_of!(
                                __ShadowPacket_Payload<'__facet>,
                                _0
                            ))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&const { [] })
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("Payload")
                        .discriminant(1)
                        .fields(::facet::StructDef::builder().tuple().fields(fields).build())
                        .build()
                },
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "Packet")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .doc(&[" Network packet types"])
            .build()
    };
}
