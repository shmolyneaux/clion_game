---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum CommentedEnum {\n            /// This is variant A\n            #[allow(dead_code)]\n            A,\n            /// This is variant B\n            /// with multiple lines\n            #[allow(dead_code)]\n            B(u32),\n            /// This is variant C\n            /// which has named fields\n            #[allow(dead_code)]\n            C {\n                /// This is field x\n                x: u32,\n                /// This is field y\n                y: String,\n            },\n        }\n        \"#)"
---
#[used]
static COMMENTED_ENUM_SHAPE: &'static ::facet::Shape = <CommentedEnum as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for CommentedEnum {
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        struct __ShadowCommentedEnum_B<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            _0: u32,
        }
        #[repr(C)]
        struct __ShadowCommentedEnum_C<'__facet> {
            _discriminant: u8,
            _phantom: ::core::marker::PhantomData<(*mut &'__facet ())>,
            x: u32,
            y: String,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("A")
                    .discriminant(0)
                    .fields(::facet::StructDef::builder().unit().build())
                    .doc(&[" This is variant A"])
                    .build(),
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowCommentedEnum_B<'__facet>| &s._0)
                            })
                            .offset(::core::mem::offset_of!(
                                __ShadowCommentedEnum_B<'__facet>,
                                _0
                            ))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&const { [] })
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("B")
                        .discriminant(1)
                        .fields(::facet::StructDef::builder().tuple().fields(fields).build())
                        .doc(&[" This is variant B", " with multiple lines"])
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [
                            ::facet::Field::builder()
                                .name("x")
                                .shape(|| {
                                    ::facet::shape_of(&|s: &__ShadowCommentedEnum_C<'__facet>| &s.x)
                                })
                                .offset(::core::mem::offset_of!(
                                    __ShadowCommentedEnum_C<'__facet>,
                                    x
                                ))
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&const { [] })
                                .doc(&[" This is field x"])
                                .build(),
                            ::facet::Field::builder()
                                .name("y")
                                .shape(|| {
                                    ::facet::shape_of(&|s: &__ShadowCommentedEnum_C<'__facet>| &s.y)
                                })
                                .offset(::core::mem::offset_of!(
                                    __ShadowCommentedEnum_C<'__facet>,
                                    y
                                ))
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&const { [] })
                                .doc(&[" This is field y"])
                                .build(),
                        ]
                    };
                    ::facet::Variant::builder()
                        .name("C")
                        .discriminant(2)
                        .fields(
                            ::facet::StructDef::builder()
                                .struct_()
                                .fields(fields)
                                .build(),
                        )
                        .doc(&[" This is variant C", " which has named fields"])
                        .build()
                },
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "CommentedEnum")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .build()
    };
}
