---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        /// This is an enum\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum MyEnum {\n            #[allow(dead_code)]\n            A,\n            #[allow(dead_code)]\n            B,\n        }\n        \"#)"
---
#[used]
static MY_ENUM_SHAPE: &'static ::facet::Shape = <MyEnum as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for MyEnum {
    const SHAPE: &'static ::facet::Shape = &const {
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("A")
                    .discriminant(0)
                    .fields(::facet::StructDef::builder().unit().build())
                    .build(),
                ::facet::Variant::builder()
                    .name("B")
                    .discriminant(1)
                    .fields(::facet::StructDef::builder().unit().build())
                    .build(),
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "MyEnum")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .doc(&[" This is an enum"])
            .build()
    };
}
