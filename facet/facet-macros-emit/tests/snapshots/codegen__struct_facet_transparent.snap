---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(transparent)]\n        struct Wrapper(u32);\n        \"#)"
---
#[used]
static WRAPPER_SHAPE: &'static ::facet::Shape = <Wrapper as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Wrapper {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("0")
                .shape(|| ::facet::shape_of(&|s: &Wrapper| &s.0))
                .offset(::core::mem::offset_of!(Wrapper, 0))
                .flags(::facet::FieldFlags::EMPTY)
                .attributes(&const { [] })
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f, "Wrapper"
                ));
            unsafe fn try_from_inner<'src, 'dst>(
                src_ptr: ::facet::PtrConst<'src>,
                src_shape: &'static ::facet::Shape,
                dst: ::facet::PtrUninit<'dst>,
            ) -> Result<::facet::PtrMut<'dst>, ::facet::TryFromInnerError> {
                if src_shape.id != <u32 as ::facet::Facet>::SHAPE.id {
                    return Err(::facet::TryFromInnerError::UnsupportedSourceShape {
                        src_shape,
                        expected: &[<u32 as ::facet::Facet>::SHAPE],
                    });
                }
                let inner_val = unsafe { src_ptr.get::<u32>() };
                Ok(unsafe { dst.put(Wrapper(inner_val.clone())) })
            }
            vtable.try_from_inner = Some(try_from_inner);
            unsafe fn try_into_inner<'src, 'dst>(
                src_ptr: ::facet::PtrConst<'src>,
                dst: ::facet::PtrUninit<'dst>,
            ) -> Result<::facet::PtrMut<'dst>, ::facet::TryIntoInnerError> {
                let wrapper = unsafe { src_ptr.get::<Wrapper>() };
                Ok(unsafe { dst.put(wrapper.0.clone()) })
            }
            vtable.try_into_inner = Some(try_into_inner);
            unsafe fn try_borrow_inner<'src>(
                src_ptr: ::facet::PtrConst<'src>,
            ) -> Result<::facet::PtrConst<'src>, ::facet::TryBorrowInnerError> {
                let wrapper = unsafe { src_ptr.get::<Wrapper>() };
                Ok(::facet::PtrConst::new(&wrapper.0 as *const _ as *const u8))
            }
            vtable.try_borrow_inner = Some(try_borrow_inner);
            vtable
        };
        fn inner_shape() -> &'static ::facet::Shape {
            <u32 as ::facet::Facet>::SHAPE
        }
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::TupleStruct)
                    .fields(fields)
                    .build(),
            ))
            .inner(inner_shape)
            .attributes(&[::facet::ShapeAttribute::Transparent])
            .build()
    };
}
