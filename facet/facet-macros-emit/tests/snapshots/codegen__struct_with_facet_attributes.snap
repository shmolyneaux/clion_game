---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(name = \"MyCoolStruct\", deny_unknown_fields, version = 2)]\n        struct StructWithAttributes {\n            #[facet(name = \"identifier\", default = \"generate_id\", sensitive)]\n            id: String,\n            #[facet(skip, version = 3)]\n            internal_data: Vec<u8>,\n            #[facet(deprecated = \"Use 'new_value' instead\")]\n            old_value: i32,\n            new_value: i32,\n        }\n        \"#)"
---
#[used]
static STRUCT_WITH_ATTRIBUTES_SHAPE: &'static ::facet::Shape =
    <StructWithAttributes as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for StructWithAttributes {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                ::facet::Field::builder()
                    .name("id")
                    .shape(|| ::facet::shape_of(&|s: &StructWithAttributes| &s.id))
                    .offset(::core::mem::offset_of!(StructWithAttributes, id))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(
                        &const {
                            [::facet::FieldAttribute::Arbitrary(
                                "name = \"identifier\" , default = \"generate_id\" , sensitive",
                            )]
                        },
                    )
                    .build(),
                ::facet::Field::builder()
                    .name("internal_data")
                    .shape(|| ::facet::shape_of(&|s: &StructWithAttributes| &s.internal_data))
                    .offset(::core::mem::offset_of!(StructWithAttributes, internal_data))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(
                        &const { [::facet::FieldAttribute::Arbitrary("skip , version = 3")] },
                    )
                    .build(),
                ::facet::Field::builder()
                    .name("old_value")
                    .shape(|| ::facet::shape_of(&|s: &StructWithAttributes| &s.old_value))
                    .offset(::core::mem::offset_of!(StructWithAttributes, old_value))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(
                        &const {
                            [::facet::FieldAttribute::Arbitrary(
                                "deprecated = \"Use 'new_value' instead\"",
                            )]
                        },
                    )
                    .build(),
                ::facet::Field::builder()
                    .name("new_value")
                    .shape(|| ::facet::shape_of(&|s: &StructWithAttributes| &s.new_value))
                    .offset(::core::mem::offset_of!(StructWithAttributes, new_value))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [] })
                    .build(),
            ]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f,
                    "StructWithAttributes"
                ));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .attributes(&[::facet::ShapeAttribute::Arbitrary(
                "name = \"MyCoolStruct\" , deny_unknown_fields , version = 2",
            )])
            .build()
    };
}
