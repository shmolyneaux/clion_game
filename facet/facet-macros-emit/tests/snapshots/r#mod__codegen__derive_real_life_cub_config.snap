---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[cfg_attr(feature = \"testfeat\", facet(deny_unknown_fields))]\n        pub struct CubConfig {\n            /// size the disk cache is allowed to use\n            #[cfg_attr(feature = \"testfeat\", facet(skip_serializing))]\n            #[cfg_attr(\n                feature = \"testfeat\",\n                facet(default = \"serde_defaults::default_disk_cache_size\")\n            )]\n            pub disk_cache_size: String,\n\n            /// Listen address without http, something like \"127.0.0.1:1111\"\n            #[cfg_attr(feature = \"testfeat\", facet(default = \"serde_defaults::address\"))]\n            pub address: std::string::String,\n\n            /// Something like `http://localhost:1118`\n            /// or `http://mom.svc.cluster.local:1118`, never\n            /// a trailing slash.\n            #[cfg_attr(feature = \"testfeat\", facet(default = \"serde_defaults::mom_base_url\"))]\n            pub mom_base_url: String,\n\n            /// API key used to talk to mom\n            #[cfg_attr(feature = \"testfeat\", facet(default = \"serde_defaults::mom_api_key\"))]\n            #[cfg_attr(feature = \"testfeat\", facet(sensitive))] // Example addition\n            pub mom_api_key: String,\n        }\n        \"#)"
---
#[used]
static CUB_CONFIG_SHAPE: &'static ::facet::Shape = <CubConfig as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for CubConfig {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                ::facet::Field::builder()
                    .name("disk_cache_size")
                    .shape(|| ::facet::shape_of(&|s: &CubConfig| &s.disk_cache_size))
                    .offset(::core::mem::offset_of!(CubConfig, disk_cache_size))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [] })
                    .doc(&[" size the disk cache is allowed to use"])
                    .build(),
                ::facet::Field::builder()
                    .name("address")
                    .shape(|| ::facet::shape_of(&|s: &CubConfig| &s.address))
                    .offset(::core::mem::offset_of!(CubConfig, address))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [] })
                    .doc(&[" Listen address without http, something like \"127.0.0.1:1111\""])
                    .build(),
                ::facet::Field::builder()
                    .name("mom_base_url")
                    .shape(|| ::facet::shape_of(&|s: &CubConfig| &s.mom_base_url))
                    .offset(::core::mem::offset_of!(CubConfig, mom_base_url))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [] })
                    .doc(&[
                        " Something like `http://localhost:1118`",
                        " or `http://mom.svc.cluster.local:1118`, never",
                        " a trailing slash.",
                    ])
                    .build(),
                ::facet::Field::builder()
                    .name("mom_api_key")
                    .shape(|| ::facet::shape_of(&|s: &CubConfig| &s.mom_api_key))
                    .offset(::core::mem::offset_of!(CubConfig, mom_api_key))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [] })
                    .doc(&[" API key used to talk to mom"])
                    .build(),
            ]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f,
                    "CubConfig"
                ));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .build()
    };
}
