---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Debug, Facet, PartialEq)]\n        struct Macroed {\n            // NOTICE type is variable here\n            value: u32,\n        }\n        \"#)"
---
#[used]
static MACROED_SHAPE: &'static ::facet::Shape = <Macroed as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Macroed {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("value")
                .shape(|| ::facet::shape_of(&|s: &Macroed| &s.value))
                .offset(::core::mem::offset_of!(Macroed, value))
                .flags(::facet::FieldFlags::EMPTY)
                .attributes(&const { [] })
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f, "Macroed"
                ));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .build()
    };
}
