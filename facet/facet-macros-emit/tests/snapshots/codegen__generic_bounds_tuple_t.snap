---
source: facet-macros-emit/tests/codegen.rs
expression: "expand(r#\"\n        struct Foo<T>(Vec<T>);\n        \"#)"
---
#[automatically_derived]
unsafe impl<'__facet, T> ::facet::Facet<'__facet> for Foo<T>
where
    T: ::facet::Facet<'__facet>,
{
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("0")
                .shape(|| ::facet::shape_of(&|s: &Foo<T>| &s.0))
                .offset(::core::mem::offset_of!(Foo<T>, 0))
                .flags(::facet::FieldFlags::EMPTY)
                .attributes(&const { [] })
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f, "Foo"
                ));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .type_params(&[::facet::TypeParam {
                name: "T",
                shape: || <T as ::facet::Facet>::SHAPE,
            }])
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::TupleStruct)
                    .fields(fields)
                    .build(),
            ))
            .build()
    };
}
